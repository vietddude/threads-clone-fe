/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as NotFoundImport } from './routes/not-found'
import { Route as ErrorImport } from './routes/error'
import { Route as pagesIndexImport } from './routes/(pages)/index'
import { Route as authAuthImport } from './routes/(auth)/_auth'
import { Route as authAuthSsoCallbackImport } from './routes/(auth)/_auth.sso-callback'
import { Route as authAuthSetupImport } from './routes/(auth)/_auth.setup'
import { Route as authAuthLoginImport } from './routes/(auth)/_auth.login'

// Create Virtual Routes

const authImport = createFileRoute('/(auth)')()

// Create/Update Routes

const authRoute = authImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRoute,
} as any)

const NotFoundRoute = NotFoundImport.update({
  id: '/not-found',
  path: '/not-found',
  getParentRoute: () => rootRoute,
} as any)

const ErrorRoute = ErrorImport.update({
  id: '/error',
  path: '/error',
  getParentRoute: () => rootRoute,
} as any)

const pagesIndexRoute = pagesIndexImport.update({
  id: '/(pages)/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const authAuthRoute = authAuthImport.update({
  id: '/_auth',
  getParentRoute: () => authRoute,
} as any)

const authAuthSsoCallbackRoute = authAuthSsoCallbackImport.update({
  id: '/sso-callback',
  path: '/sso-callback',
  getParentRoute: () => authAuthRoute,
} as any)

const authAuthSetupRoute = authAuthSetupImport.update({
  id: '/setup',
  path: '/setup',
  getParentRoute: () => authAuthRoute,
} as any)

const authAuthLoginRoute = authAuthLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => authAuthRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/error': {
      id: '/error'
      path: '/error'
      fullPath: '/error'
      preLoaderRoute: typeof ErrorImport
      parentRoute: typeof rootRoute
    }
    '/not-found': {
      id: '/not-found'
      path: '/not-found'
      fullPath: '/not-found'
      preLoaderRoute: typeof NotFoundImport
      parentRoute: typeof rootRoute
    }
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/_auth': {
      id: '/(auth)/_auth'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authAuthImport
      parentRoute: typeof authRoute
    }
    '/(pages)/': {
      id: '/(pages)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof pagesIndexImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/_auth/login': {
      id: '/(auth)/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authAuthLoginImport
      parentRoute: typeof authAuthImport
    }
    '/(auth)/_auth/setup': {
      id: '/(auth)/_auth/setup'
      path: '/setup'
      fullPath: '/setup'
      preLoaderRoute: typeof authAuthSetupImport
      parentRoute: typeof authAuthImport
    }
    '/(auth)/_auth/sso-callback': {
      id: '/(auth)/_auth/sso-callback'
      path: '/sso-callback'
      fullPath: '/sso-callback'
      preLoaderRoute: typeof authAuthSsoCallbackImport
      parentRoute: typeof authAuthImport
    }
  }
}

// Create and export the route tree

interface authAuthRouteChildren {
  authAuthLoginRoute: typeof authAuthLoginRoute
  authAuthSetupRoute: typeof authAuthSetupRoute
  authAuthSsoCallbackRoute: typeof authAuthSsoCallbackRoute
}

const authAuthRouteChildren: authAuthRouteChildren = {
  authAuthLoginRoute: authAuthLoginRoute,
  authAuthSetupRoute: authAuthSetupRoute,
  authAuthSsoCallbackRoute: authAuthSsoCallbackRoute,
}

const authAuthRouteWithChildren = authAuthRoute._addFileChildren(
  authAuthRouteChildren,
)

interface authRouteChildren {
  authAuthRoute: typeof authAuthRouteWithChildren
}

const authRouteChildren: authRouteChildren = {
  authAuthRoute: authAuthRouteWithChildren,
}

const authRouteWithChildren = authRoute._addFileChildren(authRouteChildren)

export interface FileRoutesByFullPath {
  '/error': typeof ErrorRoute
  '/not-found': typeof NotFoundRoute
  '/': typeof pagesIndexRoute
  '/login': typeof authAuthLoginRoute
  '/setup': typeof authAuthSetupRoute
  '/sso-callback': typeof authAuthSsoCallbackRoute
}

export interface FileRoutesByTo {
  '/error': typeof ErrorRoute
  '/not-found': typeof NotFoundRoute
  '/': typeof pagesIndexRoute
  '/login': typeof authAuthLoginRoute
  '/setup': typeof authAuthSetupRoute
  '/sso-callback': typeof authAuthSsoCallbackRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/error': typeof ErrorRoute
  '/not-found': typeof NotFoundRoute
  '/(auth)': typeof authRouteWithChildren
  '/(auth)/_auth': typeof authAuthRouteWithChildren
  '/(pages)/': typeof pagesIndexRoute
  '/(auth)/_auth/login': typeof authAuthLoginRoute
  '/(auth)/_auth/setup': typeof authAuthSetupRoute
  '/(auth)/_auth/sso-callback': typeof authAuthSsoCallbackRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/error'
    | '/not-found'
    | '/'
    | '/login'
    | '/setup'
    | '/sso-callback'
  fileRoutesByTo: FileRoutesByTo
  to: '/error' | '/not-found' | '/' | '/login' | '/setup' | '/sso-callback'
  id:
    | '__root__'
    | '/error'
    | '/not-found'
    | '/(auth)'
    | '/(auth)/_auth'
    | '/(pages)/'
    | '/(auth)/_auth/login'
    | '/(auth)/_auth/setup'
    | '/(auth)/_auth/sso-callback'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  ErrorRoute: typeof ErrorRoute
  NotFoundRoute: typeof NotFoundRoute
  authRoute: typeof authRouteWithChildren
  pagesIndexRoute: typeof pagesIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  ErrorRoute: ErrorRoute,
  NotFoundRoute: NotFoundRoute,
  authRoute: authRouteWithChildren,
  pagesIndexRoute: pagesIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/error",
        "/not-found",
        "/(auth)",
        "/(pages)/"
      ]
    },
    "/error": {
      "filePath": "error.tsx"
    },
    "/not-found": {
      "filePath": "not-found.tsx"
    },
    "/(auth)": {
      "filePath": "(auth)",
      "children": [
        "/(auth)/_auth"
      ]
    },
    "/(auth)/_auth": {
      "filePath": "(auth)/_auth.tsx",
      "parent": "/(auth)",
      "children": [
        "/(auth)/_auth/login",
        "/(auth)/_auth/setup",
        "/(auth)/_auth/sso-callback"
      ]
    },
    "/(pages)/": {
      "filePath": "(pages)/index.tsx"
    },
    "/(auth)/_auth/login": {
      "filePath": "(auth)/_auth.login.tsx",
      "parent": "/(auth)/_auth"
    },
    "/(auth)/_auth/setup": {
      "filePath": "(auth)/_auth.setup.tsx",
      "parent": "/(auth)/_auth"
    },
    "/(auth)/_auth/sso-callback": {
      "filePath": "(auth)/_auth.sso-callback.tsx",
      "parent": "/(auth)/_auth"
    }
  }
}
ROUTE_MANIFEST_END */
